name: Release

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  pull-requests: write

jobs:
  check-code:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v5
      
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
      
    - name: Build with Maven
      run: ./mvnw -B clean package -T2C
      
    - name: Check for uncommited changes
      run: |
        if [[ "$(git status --porcelain)" != "" ]]; then
          echo ----------------------------------------
          echo git status
          echo ----------------------------------------
          git status
          echo ----------------------------------------
          echo git diff
          echo ----------------------------------------
          git diff
          echo ----------------------------------------
          echo Troubleshooting
          echo ----------------------------------------
          echo "::error::Unstaged changes detected. Locally try running: git clean -ffdx && ./mvnw -B clean package"
          exit 1
        fi

  prepare-release:
    runs-on: ubuntu-latest
    needs: [check-code]
    timeout-minutes: 10
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.version.outputs.release }}
    steps:
    - uses: actions/checkout@v5
      
    - name: Configure Git
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
  
    - name: Un-SNAP 
      run: ./mvnw -B versions:set -DremoveSnapshot -DprocessAllModules -DgenerateBackupPoms=false
  
    - name: Get version
      id: version
      run: |
        version=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "release=$version" >> $GITHUB_OUTPUT
        echo "releasenumber=${version//[!0-9]/}" >> $GITHUB_OUTPUT
  
    - name: Commit and Push
      run: |
        git add -A
        git commit -m "Release ${{ steps.version.outputs.release }}"
        git push origin
        git tag v${{ steps.version.outputs.release }}
        git push origin --tags
    
    - name: Create Release
      id: create-release
      uses: shogo82148/actions-create-release@4661dc54f7b4b564074e9fbf73884d960de569a3 # v1
      with:
        tag_name: v${{ steps.version.outputs.release }}
        release_name: v${{ steps.version.outputs.release }}
        commitish: master
        body: |
          ## [Changelog](https://github.com/${{ github.repository }}/blob/develop/CHANGELOG.md#${{ steps.version.outputs.releasenumber }})
          See [Changelog#v${{ steps.version.outputs.release }}](https://github.com/${{ github.repository }}/blob/develop/CHANGELOG.md#${{ steps.version.outputs.releasenumber }}) for more information.

          ## Installation

          ### BOM
          Note that you can also use the [BOM](https://github.com/${{ github.repository }}/tree/develop/bom) for easier dependency management.

          ### Client
          Add the following lines to your pom:
          ```XML
          <dependency>
             <groupId>software.xdev.mockserver</groupId>
             <artifactId>client</artifactId>
             <version>${{ steps.version.outputs.release }}</version>
          </dependency>
          ```

          ### Testcontainers Integration
          Add the following lines to your pom:
          ```XML
          <dependency>
             <groupId>software.xdev.mockserver</groupId>
             <artifactId>testcontainers</artifactId>
             <version>${{ steps.version.outputs.release }}</version>
          </dependency>
          ```

          ### Standalone/Server

          #### Docker
          Download the image from
          * [DockerHub](https://hub.docker.com/r/xdevsoftware/mockserver/tags?name=${{ steps.version.outputs.release }})
          * [GitHub Packages (ghcr.io)](https://github.com/xdev-software/mockserver-neolight/pkgs/container/mockserver-neolight)

          #### JAR
          If you don't like to use the docker image, the executable jar is also available 
          * at [Maven Central](https://repo1.maven.org/maven2/software/xdev/mockserver/server/${{ steps.version.outputs.release }}/server-${{ steps.version.outputs.release }}-standalone.jar)
          * or in the release assets below

  publish-maven:
    runs-on: ubuntu-latest
    needs: [prepare-release]
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v5
    
    - name: Init Git and pull
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git pull

    - name: Set up JDK
      uses: actions/setup-java@v4
      with: # running setup-java overwrites the settings.xml
        distribution: 'temurin'
        java-version: '17'
        server-id: github-central
        server-password: PACKAGES_CENTRAL_TOKEN
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Only import once

    - name: Publish to GitHub Packages
      run: |
        modules=("bom")
        dependency_management_block=$(grep -ozP '<dependencyManagement>(\r|\n|.)*<\/dependencyManagement>' 'bom/pom.xml' | tr -d '\0')
        modules+=($(echo $dependency_management_block | grep -oP '(?<=<artifactId>)[^<]+'))
        printf -v modules_joined '%s,' "${modules[@]}"
        modules_arg=$(echo "${modules_joined%,}")
        ./mvnw -B deploy -pl "$modules_arg" -am -T2C -P publish -DskipTests -DaltDeploymentRepository=github-central::https://maven.pkg.github.com/xdev-software/central
      env:
        PACKAGES_CENTRAL_TOKEN: ${{ secrets.PACKAGES_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
  
    - name: Set up JDK
      uses: actions/setup-java@v4
      with: # running setup-java again overwrites the settings.xml
        distribution: 'temurin'
        java-version: '17'
        server-id: sonatype-central-portal
        server-username: MAVEN_CENTRAL_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Publish to Central Portal
      run: |
        modules=("bom")
        dependency_management_block=$(grep -ozP '<dependencyManagement>(\r|\n|.)*<\/dependencyManagement>' 'bom/pom.xml' | tr -d '\0')
        modules+=($(echo $dependency_management_block | grep -oP '(?<=<artifactId>)[^<]+'))
        printf -v modules_joined '%s,' "${modules[@]}"
        modules_arg=$(echo "${modules_joined%,}")
        ./mvnw -B deploy -pl "$modules_arg" -am -T2C -P publish,publish-sonatype-central-portal -DskipTests
      env:
        MAVEN_CENTRAL_USERNAME: ${{ secrets.SONATYPE_MAVEN_CENTRAL_PORTAL_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_MAVEN_CENTRAL_PORTAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
    
    - name: Upload server standalone JAR
      uses: actions/upload-artifact@v4
      with:
        name: server-standalone
        path: server/target/server-standalone.jar
        if-no-files-found: error

    - name: Upload Release assets
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ needs.prepare-release.outputs.upload_url }}
        asset_path: server/target/server-standalone.jar

  publish-docker:
    runs-on: ubuntu-latest
    needs: [prepare-release, publish-maven]
    timeout-minutes: 15
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
    - uses: actions/checkout@v4

    - name: Init Git and pull
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git pull

    - name: Download server JAR
      uses: actions/download-artifact@v4
      with:
        name: server-standalone
        path: server/target

    - uses: docker/setup-qemu-action@v3

    - uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/mockserver
          ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.prepare-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.prepare-release.outputs.version }}
          latest

    - uses: docker/build-push-action@v6
      id: push
      with:
        context: ./server
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=image,compression=zstd,force-compression=true

    - name: Generate artifact attestation (ghcr.io)
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ghcr.io/${{ github.repository }}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true

  publish-pages:
    runs-on: ubuntu-latest
    needs: [publish-maven]
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v5
      
    - name: Init Git and pull
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git pull

    - name: Setup - Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build site
      run: ./mvnw -B compile site -DskipTests -T2C

    - name: Aggregate site
      run: |
        modules=($(grep -ozP '(?<=module>)[^<]+' 'pom.xml' | tr -d '\0'))
        for m in "${modules[@]}"
        do
            echo "$m/target/site -> ./target/site/$m"
            cp -r $m/target/site ./target/site/$m
        done

    - name: Deploy to Github pages
      uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/site
        force_orphan: true

  after-release:
    runs-on: ubuntu-latest
    needs: [publish-maven, publish-docker]
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v5
      
    - name: Init Git and pull
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git pull

    - name: Inc Version and SNAP 
      run: ./mvnw -B versions:set -DnextSnapshot -DprocessAllModules -DgenerateBackupPoms=false

    - name: Git Commit and Push
      run: |
        git add -A
        git commit -m "Preparing for next development iteration"
        git push origin
    
    - name: pull-request
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh_pr_up() { 
          gh pr create "$@" || gh pr edit "$@" 
        }
        gh_pr_up -B "develop" \
          --title "Sync back" \
          --body "An automated PR to sync changes back"
